{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Documents\\\\KULIAH\\\\SMT_4\\\\PKWU\\\\Prototype\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport Dashboard from './components/Dashboard';\nimport Navigation from './components/Navigation';\nimport History from './components/History';\nimport Alerts from './components/Alert';\nimport './App.css';\n\n// Set up socket.io client\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nconst socket = io(API_URL);\nfunction App() {\n  _s();\n  const [temperature, setTemperature] = useState(null);\n  const [humidity, setHumidity] = useState(null);\n  const [heaterState, setHeaterState] = useState(false);\n  const [alerts, setAlerts] = useState([]);\n  const [isConnected, setIsConnected] = useState(false);\n  useEffect(() => {\n    // Initial data fetch\n    const fetchInitialData = async () => {\n      try {\n        // Fetch the most recent temperature reading\n        const tempResponse = await fetch(`${API_URL}/api/readings?type=temperature&limit=1`);\n        const tempData = await tempResponse.json();\n        if (tempData.length > 0) {\n          setTemperature(tempData[0].value);\n          setHeaterState(tempData[0].heaterState);\n        }\n\n        // Fetch the most recent humidity reading\n        const humResponse = await fetch(`${API_URL}/api/readings?type=humidity&limit=1`);\n        const humData = await humResponse.json();\n        if (humData.length > 0) {\n          setHumidity(humData[0].value);\n        }\n\n        // Fetch recent alerts\n        const alertResponse = await fetch(`${API_URL}/api/alerts?resolved=false`);\n        const alertData = await alertResponse.json();\n        setAlerts(alertData);\n      } catch (error) {\n        console.error('Error fetching initial data:', error);\n      }\n    };\n    fetchInitialData();\n\n    // Socket.io event listeners\n    socket.on('connect', () => {\n      setIsConnected(true);\n      console.log('Connected to server');\n    });\n    socket.on('disconnect', () => {\n      setIsConnected(false);\n      console.log('Disconnected from server');\n    });\n    socket.on('temperature', data => {\n      setTemperature(data.value);\n      setHeaterState(data.heater);\n    });\n    socket.on('humidity', data => {\n      setHumidity(data.value);\n    });\n    socket.on('alert', data => {\n      setAlerts(prevAlerts => [data, ...prevAlerts]);\n    });\n\n    // Clean up on component unmount\n    return () => {\n      socket.off('connect');\n      socket.off('disconnect');\n      socket.off('temperature');\n      socket.off('humidity');\n      socket.off('alert');\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {\n        connected: isConnected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(Dashboard, {\n              temperature: temperature,\n              humidity: humidity,\n              heaterState: heaterState,\n              alerts: alerts.slice(0, 3)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/history\",\n            element: /*#__PURE__*/_jsxDEV(History, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 45\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/alerts\",\n            element: /*#__PURE__*/_jsxDEV(Alerts, {\n              alerts: alerts,\n              setAlerts: setAlerts,\n              apiUrl: API_URL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"gtvWe9sE9yAu21FAewsukoVud+I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","io","Dashboard","Navigation","History","Alerts","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","socket","App","_s","temperature","setTemperature","humidity","setHumidity","heaterState","setHeaterState","alerts","setAlerts","isConnected","setIsConnected","fetchInitialData","tempResponse","fetch","tempData","json","length","value","humResponse","humData","alertResponse","alertData","error","console","on","log","data","heater","prevAlerts","off","children","className","connected","fileName","_jsxFileName","lineNumber","columnNumber","path","element","slice","apiUrl","_c","$RefreshReg$"],"sources":["C:/Users/lenovo/Documents/KULIAH/SMT_4/PKWU/Prototype/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\nimport Dashboard from './components/Dashboard';\r\nimport Navigation from './components/Navigation';\r\nimport History from './components/History';\r\nimport Alerts from './components/Alert';\r\nimport './App.css';\r\n\r\n// Set up socket.io client\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\nconst socket = io(API_URL);\r\n\r\nfunction App() {\r\n  const [temperature, setTemperature] = useState(null);\r\n  const [humidity, setHumidity] = useState(null);\r\n  const [heaterState, setHeaterState] = useState(false);\r\n  const [alerts, setAlerts] = useState([]);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Initial data fetch\r\n    const fetchInitialData = async () => {\r\n      try {\r\n        // Fetch the most recent temperature reading\r\n        const tempResponse = await fetch(`${API_URL}/api/readings?type=temperature&limit=1`);\r\n        const tempData = await tempResponse.json();\r\n        if (tempData.length > 0) {\r\n          setTemperature(tempData[0].value);\r\n          setHeaterState(tempData[0].heaterState);\r\n        }\r\n\r\n        // Fetch the most recent humidity reading\r\n        const humResponse = await fetch(`${API_URL}/api/readings?type=humidity&limit=1`);\r\n        const humData = await humResponse.json();\r\n        if (humData.length > 0) {\r\n          setHumidity(humData[0].value);\r\n        }\r\n\r\n        // Fetch recent alerts\r\n        const alertResponse = await fetch(`${API_URL}/api/alerts?resolved=false`);\r\n        const alertData = await alertResponse.json();\r\n        setAlerts(alertData);\r\n      } catch (error) {\r\n        console.error('Error fetching initial data:', error);\r\n      }\r\n    };\r\n\r\n    fetchInitialData();\r\n\r\n    // Socket.io event listeners\r\n    socket.on('connect', () => {\r\n      setIsConnected(true);\r\n      console.log('Connected to server');\r\n    });\r\n\r\n    socket.on('disconnect', () => {\r\n      setIsConnected(false);\r\n      console.log('Disconnected from server');\r\n    });\r\n\r\n    socket.on('temperature', (data) => {\r\n      setTemperature(data.value);\r\n      setHeaterState(data.heater);\r\n    });\r\n\r\n    socket.on('humidity', (data) => {\r\n      setHumidity(data.value);\r\n    });\r\n\r\n    socket.on('alert', (data) => {\r\n      setAlerts((prevAlerts) => [data, ...prevAlerts]);\r\n    });\r\n\r\n    // Clean up on component unmount\r\n    return () => {\r\n      socket.off('connect');\r\n      socket.off('disconnect');\r\n      socket.off('temperature');\r\n      socket.off('humidity');\r\n      socket.off('alert');\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"app\">\r\n        <Navigation connected={isConnected} />\r\n        <div className=\"container\">\r\n          <Routes>\r\n            <Route \r\n              path=\"/\" \r\n              element={\r\n                <Dashboard \r\n                  temperature={temperature}\r\n                  humidity={humidity}\r\n                  heaterState={heaterState}\r\n                  alerts={alerts.slice(0, 3)}\r\n                />\r\n              } \r\n            />\r\n            <Route path=\"/history\" element={<History />} />\r\n            <Route \r\n              path=\"/alerts\" \r\n              element={\r\n                <Alerts \r\n                  alerts={alerts}\r\n                  setAlerts={setAlerts}\r\n                  apiUrl={API_URL}\r\n                />\r\n              } \r\n            />\r\n          </Routes>\r\n        </div>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}